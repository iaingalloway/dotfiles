{{- $activeSchemeName := .activeScheme.name -}}
{{- $activeScheme := index .colourSchemes $activeSchemeName -}}
{{- $hash := index $activeScheme $activeScheme.accentOneBright -}}
{{- $decorate := index $activeScheme $activeScheme.accentTwoBright -}}
{{- $author := index $activeScheme $activeScheme.accentThreeBright -}}

[core]
  editor = nano
  commentChar = "-"
  eol = lf
  autocrlf = input

[user]
  name = Iain Galloway
  email = iain.galloway@gmail.com
  useConfigOnly = true

[includeIf "hasconfig:remote.*.url:*dev.azure.com*/menziesdistribution/**"]
  path = ~/.config/git/menzies

[includeIf "hasconfig:remote.*.url:**/*dev.azure.com*/menziesdistribution/**"]
  path = ~/.config/git/menzies

[github]
  user = iaingalloway

[alias]
  a = add

  ai = add --interactive

  ap = add --patch

  b = branch

  br = branch --remote

  c = commit

  ci = commit

  cm = commit --message

  # Commit all changes in the working tree with the given message
  cma = !git add --all && git commit --message

  # Commit all changes in the working tree with the given message and push
  cmap = "!f() { git add --all && git commit -m \"$1\" && git push; }; f"

  co = !echo Use git switch or git restore && exit 1

  d = difftool

  f = fetch

  l = lf -n 20

  lc = l-concise -n 40

  lf = "!git log --graph --pretty=format:'%C({{ $hash }})%h%Creset %s %C({{ $decorate }})%(decorate:prefix=,suffix= ,tag=,separator= ,pointer=>)%C({{ $author }})%an %cr%Creset'"

  l-concise = "!git log --graph --pretty=format:'%C(#00A8A5)%h%Creset %<(80,trunc)%s'"

  p = push

  pf = push --force-with-lease

  pushf = push --force-with-lease

  r = rebase

  s = status

  sh = show

  sw = switch

  swb = switch -

  swc = switch -c

  # Create a tag with an empty message
  t = tag -a --message=""

  unstage = reset HEAD

  # Append the currently staged files to the latest commit
  append = commit --amend --no-edit

  # Append all changes in the working tree to the latest commit
  append-all = !git add --all && git append

  # Append the currently staged files to the latest commit and force push
  appendf = !git append && git pushf

  # Append all changes in the working tree to the latest commit and force push
  appendf-all = !git append-all && git pushf

  # Get the name of the current branch
  current-branch = !git rev-parse --verify HEAD >/dev/null 2>&1 && git rev-parse --abbrev-ref HEAD || (echo 'No commits' && exit 1)

  # Get the name of the current remote
  current-remote = !git config --get branch.$(git current-branch).remote || (echo 'No remote' && exit 1)

  # Set the head of the current remote
  current-remote-set-head = !remote=$(git current-remote) && git fetch $remote && git remote set-head $remote -a || (echo 'No remote' && exit 1)

  # Discard all changes in the working tree
  discard = !git reset HEAD . -- && git restore -- . && git clean -fd .

  # Perform a git command in each subdirectory of the current directory
  foreach-subdirectory = !ls -d */ | xargs -I{} git -C {}

  # Show the status of each subdirectory of the current directory
  foreach-subdirectory-status = foreach-subdirectory short-status

  # Get the name of main branch
  main = !git current-remote-set-head >/dev/null 2>&1 && git for-each-ref --format='%(refname:lstrip=3)' $(git symbolic-ref refs/remotes/$(git current-remote)/HEAD) || (echo 'No remote' && exit 1)

  # Initialise a new repository using an existing repository as a template
  new = "!f() { git new-get $1 $2 && git new-init $2 && git new-script $2 && git new-replace $1 $2; }; f"
  new-get = "!f() { git new-clone git@github.com:$(git config github.user)/$1-template $2; }; f"
  new-clone = "clone --depth 1"
  new-init = "!f() { cd $1 && rm -rf .git && git init; }; f"
  new-script = "!f() { test -f $1/init.sh && sh $1/init.sh $1 && rm $1/init.sh || exit 0; }; f"
  new-replace = "!f() { git new-sed $1-template $2; }; f"
  new-sed = "!f() { find $2 -type f -exec sed -i \"s/$1/$2/g\" {} +; }; f"
  new-merge = "!f() { git new $1 $2 && cp -r $2/. . && rm -rf $2 && git new-merge-files; }; f"
  new-merge-files = "!f() { find . -name '*.tmpl' | xargs -I {} sh -c 'cat "{}" >> "${0%.tmpl}" && rm {}' {}; }; f"

  # Get the path to the root of the repository
  pwd = rev-parse --show-toplevel

  # Remove all hooks
  remove-hooks = !git config --local --unset-all core.hooksPath

  # Show a summary of status of the repository
  short-status = !echo && git pwd && git current-branch || true && git status --porcelain

  # Rebase on top of origin/main
  up = !git current-remote-set-head && git rebase $(git current-remote)/HEAD

  # Update timestamps of unpushed commits to the current time
  update-timestamps = !git rebase -x 'git commit --amend --no-edit --date=now' $(git current-remote)/$(git current-branch)

[fetch]
  prune = true
  pruneTags = true
[init]
  defaultBranch = main
[pull]
  rebase = true
[push]
  autoSetupRemote = true
  followTags = true
[rebase]
  abbreviateCommands = true
  autoStash = true
  autoSquash = true
  updateRefs = true
